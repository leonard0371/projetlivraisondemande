import 'reflect-metadata';
const bodyParser = require('body-parser');
import setupSwagger from './swagger';
const express = require('express');
import { userRouter } from './routes/userRoutes';
import { productRouter } from './routes/productRoutes';
import { vendorRouter } from './routes/vendorRoutes';
import { contactRouter } from './routes/contactRoutes';
import { categoryRouter } from './routes/categoryRoutes';
var cors = require('cors');
import dotenv from 'dotenv';
import { checkoutRouter } from './routes/checkoutRoutes';
const path = require('path');
// import authRouter from './routes/AuthRoutes';
import { cartRouter } from './routes/cartRoutes';
// import {stripeRouter} from './routes/';
import stripeRouter from './routes/Stripe'
import authRouter from './routes/AuthRoutes';
import { soldRouter } from './routes/soldproductRoutes';
import fs from 'fs';

dotenv.config();

// use it before all route definitions

const app = express();
// app.use('/uploads', express.static(path.join(__dirname,'..', 'public/uploads')));
app.use('/uploads', express.static(path.join(__dirname, 'public/uploads')));


const uploadDir = path.join(__dirname, 'public/uploads');
if (!fs.existsSync(uploadDir)) {
    fs.mkdirSync(uploadDir, { recursive: true });
    // console.log('📁 Dossier "uploads" créé automatiquement.');
} else {
    console.log('✅ Dossier "uploads" déjà existant.');
}

// 📂 Servir le dossier "uploads" statiquement
const uploadsPath = path.resolve(__dirname, 'public/uploads');
app.use('/uploads', express.static(uploadsPath));
console.log(`📂 Static folder path: ${uploadsPath}`);



setupSwagger(app);
app.use(cors({ origin: '*' }));
app.use(bodyParser.json());
app.use('/', userRouter);
app.use('/', productRouter);
app.use('/', vendorRouter);
app.use('/', contactRouter);
app.use('/', categoryRouter);
app.use('/', authRouter);
app.use('/', cartRouter);
app.use('/', soldRouter);
app.use('/api/stripe', stripeRouter);
// app.use('/',stripeRouter)
// app.delete('/:id', productRouter);
app.use('/', productRouter);
app.use('/', checkoutRouter);
console.log(app.use)
const PORT = process.env.PORT || 3001;


// app.listen(3001, () => {
//     console.log(`Server is running on port ${3001}`);
// });

app.listen(PORT, () => {
    console.log(`Server is running on port ${PORT}`);
});